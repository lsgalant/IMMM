/******************************************************************************
Houdini Style Sheet.

When adding new styles, please add them to the appropriate section.
And please maintain alphabetical order of style selectors within the same
section with the exception of the QWidget styles in the GENERAL STYLES section.
******************************************************************************/

/******************************************************************************
GENERAL STYLES
******************************************************************************/

a {
    color: yellow;
}

QWidget
{
    outline: none;
    margin: 0;
}

QWidget[transparent="true"]
{
    background: none;
    border: none;
}

QWidget[gradient="true"]
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0.0 rgb(@MenuBG@),
                stop: 1.0 rgb(@MenuBG:Brightness=0.85@));
}

QScrollArea
{
    background: none;
}

QAbstractItemView
{
    border: 1px solid rgb(@BorderDark@);
}

QCheckBox
{
    spacing: @7px@;
}

QCheckBox::indicator
{
    width: @14px@;
    height: @14px@;
}

QComboBox:!editable
{
    padding: @2px@ @10px@ @2px@ @10px@;
}
QComboBox:editable
{
   padding: 0 0 0 0;
}

QComboBox:on
{
    color: rgb(@ButtonPressedText@);
}

QComboBox QAbstractItemView
{
    background-color: rgb(@MenuBG@);
    margin: @0px@;

    border-top: @1px@ solid rgb(@MenuHighlight@);
    border-right: @1px@ solid rgb(@MenuShadow@);
    border-bottom: @1px@ solid rgb(@MenuShadow@);
    border-left: @1px@ solid rgb(@MenuHighlight@);
    padding: @0px@;
}

QComboBox QAbstractItemView::item
{
    border-bottom: 0px;
    border-top: 0px;
    border-right: 0px;
    border-left: 0px;

    padding: @2px@ @4px@ @2px@ @4px@;
}

QComboBox QAbstractItemView::item:selected
{
    background-color: rgb(@MenuSelectedBG@);

    border-bottom: 0px;
    border-top: 0px;

    color: rgb(@MenuTextSelected@);
}

QCommandLinkButton#online_login_button, 
QCommandLinkButton#traditional_login_button
{
    border: none;
    background: none;
}

QCommandLinkButton#online_login_button:hover,
QCommandLinkButton#traditional_login_button:hover
{
    background: rgb(@ButtonGradHi:Brightness=1.05@);
}

QDialog
{
    background: rgb(@BackColor@);
    color: rgb(@TextColor@);
    padding: @10px@;
}

QDockWidget
{
    background: rgb(@BackColor@);
    titlebar-close-icon: url(:/BUTTONS/close.svg);
    titlebar-normal-icon: url(:/BUTTONS/restore.svg);
}

QDockWidget::title
{
    background: rgb(@BackColor@);
}

QDockWidget::close-button,
QDockWidget::float-button
{
    border: none;
    background: rgb(@BackColor@);
    min-height:@18px@;
    min-width:@18px@;

    subcontrol-position: center right;
    subcontrol-origin: margin;
    position: absolute;
    width: @18px@;
}

QDockWidget::close-button
{
    top: @0px@; right: @2px@; bottom: @0px@;
}

QDockWidget::float-button
{
    top: @0px@; right: @22px@; bottom: @0px@;
}

QDockWidget::close-button:hover, 
QDockWidget::float-button:hover 
{
    border: none;
    background: rgb(255, 255, 255, 45%);
}

QGroupBox
{
    border: @1px@ solid rgb(@GroupBorder@);
    border-radius: @5px@;
    margin-top: @7px@;
    padding-top: @6px@;
    padding-right: @3px@;
    padding-bottom: @0px@;
    padding-left: @3px@;
}

QGroupBox::title
{ 
    subcontrol-origin: margin;
    subcontrol-position: top left;
    background: none;
    padding-left: @3px@;
    padding-right: @3px@;
    position: absolute;
    left: @5px@;
}

QHeaderView::down-arrow
{
    width: 0;
    height: 0;
    border-left: @3px@ solid rgba(@ButtonMenuArrow@, 0);
    border-right: @3px@ solid rgba(@ButtonMenuArrow@, 0);
    border-top: @5px@ solid rgb(@ScrollArrow@);
    margin-right: @5px@;
}

QHeaderView::section
{
    border:        @1px@ solid rgb(@ListTitleShadow@);
    border-right:  0;
    height:        @18px@;
    padding:       @1px@;
    padding-left:  @4px@;
    padding-right: @4px@;
    background:    qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                   stop: 0.0 rgb(@ListTitleGradHi@), 
                   stop: 1.0 rgb(@ListTitleGradLow@) );
}

QHeaderView::up-arrow
{
    width:         0;
    height:        0;
    border-left:   @3px@ solid rgba(@ButtonGradHi@, 0);
    border-right:  @3px@ solid rgba(@ButtonGradHi@, 0);
    border-bottom: @5px@ solid rgb(@ScrollArrow@);
    margin-right:  @5px@;
}

QLabel[field_label="true"]
{
    margin-right: @7px@;
}

QLineEdit
{
    height: @17px@;
}

QLineEdit,
QSpinBox
{
    padding: @1px@ @1px@;
    background: rgb(@TextboxBG@);
    selection-color: rgb(@SelectedTextFG@);
    selection-background-color: rgb(@SelectedTextBG@);
}

QLineEdit:disabled,
QSpinBox:disabled
{
    padding: @1px@ @1px@;
    background: rgba(@TextboxBG@, 40);
}

QListView
{
    alternate-background-color: rgb(@ListEntry1@);
    background: rgb(@ListEntry2@);
    selection-background-color: rgba(@ListEntrySelected@, 77);
    selection-color: rgb(@SelectedTextFG@);
    color: rgb(@ListText@);
}

QListView::item
{
    /* border-right: @1px@ solid rgb(@ListBorder@); */
    border-left: 0;
    border-top: 0;
    border-bottom: 0;
}

/* Setting the alternate colour of an item has no effect when the alternate-background-color is set
QListView::item::alternate
{
    background: rgb(@ListEntry1@);
}
*/

QListView::item:selected
{
    color: rgb(@TextColor@);
    background: rgba(@ListEntrySelected@, 77);
}

QListView::item:hover
{
    background: rgb(@ListHoverHighlight@);
}

QListView::item:selected:hover
{
    color: rgb(@TextColor@);
    background: rgb(@ListEntrySelected:BlendColor=ListHoverHighlight,BlendBias=0.75@);
}

QListView::item:disabled
{
    color: rgb(@DisabledTextColor@);
}

QMenu
{
    background-color: rgb(@MenuBG@);
    border-top: @1px@ solid rgb(@MenuHighlight@);
    border-left: @1px@ solid rgb(@MenuHighlight@);
    border-bottom: @1px@ solid rgb(@MenuShadow@);
    border-right: @1px@ solid rgb(@MenuShadow@);
    padding: @0px@;
}

QMenu::item
{
    padding: @1px@ @24px@ @1px@ @9px@;
}

QMenu::item:selected:!disabled
{
    background-color: rgb(@MenuSelectedBG@);
    color: rgb(@MenuTextSelected@);
}

QMenu::item:pressed:!disabled
{
    background-color: rgb(@MenuSelectedBG@);
    color: rgb(@TextColor@);
}

QMenu::indicator
{
    margin-left: @7px@;
    width: @9px@;
    height: @9px@;
}

QMenu::indicator:unchecked
{
    border: @1px@ solid rgb(@MenuHighlight@);
}

QMenu::item:exclusive:unchecked
{
    padding: @1px@ @24px@ @1px@ @4px@;
}

QMenu::item:exclusive:checked
{
    padding: @1px@ @24px@ @1px@ @6px@;
}

QMenu::item:non-exclusive:unchecked
{
    padding: @1px@ @24px@ @1px@ @4px@;
}

QMenu::item:non-exclusive:checked
{
    padding: @1px@ @24px@ @1px@ @6px@;
}

QMenu::icon
{
    position: absolute;
    top: @0px@;
    left: @SmallIconSizeDiv4@;
    bottom: @0px@;
    right: @0px@;
}

QMenu::separator
{
    background-color: rgb(@MenuHighlight@);
    margin: @4px@ @0px@ @4px@ @0px@; 
    height: @1px@;
}

QMenuBar
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@MenuBG@),
                                stop: 1.0 rgb(@MenuBG:Brightness=0.85@));
    border: @1px@ solid rgb(@BorderLight@);
    padding: 0px @1px@;
}

QMenuBar::item
{
    background: transparent;
    padding: @5px@ @4px@ @6px@ @4px@;
}

QMenuBar::item:selected
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@MenuBG:Brightness=1.08@),
                                stop: 1.0 rgb(@MenuBG:Brightness=0.918@));
}

QMenuBar::item:pressed
{
    background: rgb(@MenuSelectedBG@);
    color: rgb(@MenuTextSelected@);
}

QPlainTextEdit
{
    background: rgb(@TextboxBG@);
    color: rgb(@TextColor@);
    selection-background-color: rgb(@SelectedTextBG@);
    selection-color: rgb(@SelectedTextFG@);
}

QProgressBar
{
    border: @1px@ solid rgb(@ProgressMeterTopBorder@);
    text-align: center;
    background-color: rgb(@BackColor:Brightness=0.85@);
}

QProgressBar::chunk
{
    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                                      stop:0 rgb(@ProgressMeterGradLo@), 
                                      stop:1 rgb(@ProgressMeterGradHi@));
}



/* NOTE:
 *   The background colors will be overridden by QT_Style::drawPrimitive()
 *   in QT_Style.h.
 */

QPushButton
{
    padding-top: @2px@;
    padding-right: @15px@;
    padding-bottom: @2px@;
    padding-left: @15px@;
}

/* Plain QPushButton is overridden in QT_Style.h, they aren't removed here to
 * allow these styles to cascade into more specialized styles.
 */

QPushButton:checked{
    color: rgb(@ButtonPressedText@);
}

QPushButton:flat:checked
{
    color: rgb(@ButtonPressedText@);
}

QPushButton:flat:pressed
{
    color: rgb(@ButtonPressedText@);
}

QPushButton:flat:hover
{
    background: rgba(@ButtonHoverHighlight@, 45%);
}

QPushButton:hover
{
    background: rgba(@ButtonHoverHighlight@, 45%);
}

QPushButton:pressed
{
    color: rgb(@ButtonPressedText@);
}

QPushButton::menu-indicator
{
    color: rgb(@ButtonMenuArrow@);
    left: -@5px@;
    subcontrol-origin: padding;
    subcontrol-position: right center;
}

QPushButton::menu-indicator:disabled
{
    color: rgba(@ButtonMenuArrow@, 40%);
}

/* Note:
 *   These are NOT overridden in QT_Style.h  QToolButton is considered a
 *   complex control by QStyleOption, whereas QPushButton is considered a
 *   simple control.  QT_Style.h currently does button styling and drawing
 *   for simple pushbuttons only
 */

QToolButton
{
    height: @17px@;
    width: @17px@;
    border: @1px@ solid rgb(@BorderLight@);
    border-radius: @4px@;
    padding-top: @2px@;
    padding-bottom: @2px@;
    padding-right: @2px@;
    padding-left: @2px@;
    margin: @1px@;
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@ButtonGradHi@), 
                                stop: 1.0 rgb(@ButtonGradLow@));
}

QToolButton:checked, 
QToolButton[transparent="true"]:checked
{
    color: rgb(@ButtonPressedText@);
}

QToolButton:hover
{
    background: rgba(@ButtonHoverHighlight@, 45%);
}

QToolButton:pressed
{
    color: rgb(@ButtonPressedText@);
}

QToolButton[plain="true"], 
QToolButton[transparent="true"]
{
    background: none;
    border: none;
}
QToolButton[transparent="true"]:hover
{
    background: rgba(@ButtonHoverHighlight@, 45%);
    border: outset @1px@;
}

QToolButton[plain="true"]:hover
{
    background: rgba(@ButtonHoverHighlight@, 45%);
    border: none;
}
QToolButton[transparent="true"]:pressed
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@ButtonPressedGradHi@),
                                stop: 1.0 rgb(@ButtonPressedGradLow@));
    color: rgb(@ButtonPressedText@);
}

QToolButton[transparent="true"]:disabled
{
    background: none;
    border: none;
}

QRadioButton
{
    background: rgb(@BackColor@);
    padding: 0px;
    spacing: @3px@;
}

QRadioButton::indicator
{
    width: @14px@;
    height: @14px@;
}

QScrollArea
{
    border: @1px@ solid rgb(@TextboxBorderPrimary@);
    background-color: rgb(@BackColor@);
}

QScrollBar:horizontal
{
    border: @1px@ solid rgb(@ScrollbarUpperBorder@);
    background: rgb(@ScrollbarWell@);
    height: @15px@;
    margin: 0 @17px@ 0 @17px@;
}

QScrollBar::handle:horizontal
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@ButtonGradHi@),
                                stop: 1.0 rgb(@ButtonGradLow@));
    min-width: @30px@;
}

QScrollBar::add-line:horizontal
{
    border: @1px@ solid rgb(@ScrollbarButtonTopBorder@);

    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@ButtonGradHi@),
                                stop: 1.0 rgb(@ButtonGradLow@));
    width: @15px@;
    subcontrol-position: right;
    subcontrol-origin: margin;
}

QScrollBar::sub-line:horizontal
{
    border: @1px@ solid rgb(@ScrollbarThumbTopBorder@);

    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@ButtonGradHi@),
                                stop: 1.0 rgb(@ButtonGradLow@));
    width: @15px@;
    subcontrol-position: left;
    subcontrol-origin: margin;
}

QScrollBar::left-arrow:horizontal
{
    width: 0; 
    height: 0; 
    border-top: @3px@ solid rgb(@ButtonGradHi@);
    border-bottom: @3px@ solid rgb(@ButtonGradHi@);
    border-right: @5px@ solid rgb(@ScrollArrow@);
}

QScrollBar::right-arrow:horizontal
{
    width: 0; 
    height: 0; 
    border-top: @3px@ solid rgb(@ButtonGradHi@);
    border-bottom: @3px@ solid rgb(@ButtonGradHi@);
    border-left: @5px@ solid rgb(@ScrollArrow@);
}

QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
{
    background: none;
}

QScrollBar:vertical
{
    border: @1px@ solid rgb(@ScrollbarUpperBorder@);
    background: rgb(@ScrollbarWell@);
    width: @15px@;
    margin: @17px@ 0 @17px@ 0;
}

QScrollBar::handle:vertical
{
    background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                stop: 0.0 rgb(@ButtonGradHi@),
                                stop: 1.0 rgb(@ButtonGradLow@));
    min-height: @30px@;
}

QScrollBar::add-line:vertical
{
    border: @1px@ solid rgb(@ScrollbarThumbTopBorder@); 

    background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                stop: 0.0 rgb(@ButtonGradHi@),
                                stop: 1.0 rgb(@ButtonGradLow@));
    height: @15px@;
    subcontrol-position: bottom;
    subcontrol-origin: margin;
}

QScrollBar::sub-line:vertical
{
    border: @1px@ solid rgb(@ScrollbarThumbTopBorder@);

    background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                stop: 0.0 rgb(@ButtonGradHi@),
                                stop: 1.0 rgb(@ButtonGradLow@));
    height: @15px@;
    subcontrol-position: top;
    subcontrol-origin: margin;
}

QScrollBar::up-arrow:vertical
{
    width: 0; 
    height: 0; 
    border-left: @3px@ solid rgba(@ButtonGradHi@, 0);
    border-right: @3px@ solid rgba(@ButtonGradHi@, 0);
    border-bottom: @5px@ solid rgb(@ScrollArrow@);
}

QScrollBar::down-arrow:vertical
{
    width: 0; 
    height: 0; 
    border-left: @3px@ solid rgba(@ButtonGradHi@, 0);
    border-right: @3px@ solid rgba(@ButtonGradHi@, 0);
    border-top: @5px@ solid rgb(@ScrollArrow@);
}

QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
{
    background: none;
}

QSlider::horizontal
{
    height: @20px@;
}

QSlider::vertical
{
    width: @20px@;
}

QSlider::groove::horizontal
{
    border-top: @1px@ solid rgb(@SliderTopBorder@);
    border-bottom: @1px@ solid rgb(@SliderBottomBorder@);
    border-radius: @1px@;
    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                                stop:0.4 rgb(@SliderRemainingBevel@),
                                stop:0.5 rgb(@SliderRemainingGroove@));
    height: @3px@;
    margin: @2px@ 0;
}

QSlider::groove::vertical
{
    border-left: @1px@ solid rgb(@SliderTopBorder@);
    border-right: @1px@ solid rgb(@SliderBottomBorder@);
    border-radius: @1px@;
    background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                                stop:0.4 rgb(@SliderRemainingBevel@),
                                stop:0.5 rgb(@SliderRemainingGroove@));
    width: @3px@;
    margin: 0 @2px@;
}

QSlider::handle:horizontal
{
    background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                stop:0 rgb(@ButtonGradHi@),
                                stop:1 rgb(@ButtonGradLow@));
    border-top: @1px@ solid rgb(@SliderThumbTopBorder@);
    border-left: @1px@ solid rgb(@SliderThumbTopBorder@);
    border-right: @1px@ solid rgb(@SliderThumbBottomBorder@);
    border-bottom: @1px@ solid rgb(@SliderThumbBottomBorder@);
    width: @4px@;
    margin: -@8px@ 0;
    border-radius: @1px@;
}

QSlider::handle:vertical
{
    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                                stop:0 rgb(@ButtonGradHi@),
                                stop:1 rgb(@ButtonGradLow@));
    border-top: @1px@ solid rgb(@SliderThumbTopBorder@);
    border-left: @1px@ solid rgb(@SliderThumbTopBorder@);
    border-right: @1px@ solid rgb(@SliderThumbBottomBorder@);
    border-bottom: @1px@ solid rgb(@SliderThumbBottomBorder@);
    height: @4px@;
    margin: 0 -@8px@;
    border-radius: @1px@;
}

QSlider::sub-page:horizontal
{
    border-top: @1px@ solid rgb(@SliderTopBorder@);
    border-bottom: @1px@ solid rgb(@SliderBottomBorder@);
    border-radius: @1px@;
    background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                stop:0.4 rgb(@SliderAdvancedBevel@),
                                stop:0.5 rgb(@SliderAdvancedGroove@));
    height: @3px@;
    margin: @2px@ 0;
}

QSlider::add-page:vertical
{
    border-left: @1px@ solid rgb(@SliderTopBorder@);
    border-right: @1px@ solid rgb(@SliderBottomBorder@);
    border-radius: @1px@;
    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                                stop:0.4 rgb(@SliderAdvancedBevel@),
                                stop:0.5 rgb(@SliderAdvancedGroove@));
    width: @3px@;
    margin: 0 @2px@;
}

QSpinBox
{
    border: @1px@ solid rgb(@TextboxBorderPrimary@);
    border-radius: @1px@;
}

QSpinBox:disabled
{
    border: @1px@ solid rgba(@TextboxBorderPrimary@, 40);
    border-radius: @1px@;
}

QSpinBox::up-arrow {
    background: rgb(@ButtonMenuArrowHi@);
    width: 0; 
    height: 0; 
    border-left: @3px@ solid rgba(@ButtonGradHi@, 0);
    border-right: @3px@ solid rgba(@ButtonGradHi@, 0);
    border-bottom: @5px@ solid rgb(@ScrollArrow@);
}

QSpinBox::down-arrow {
    background: rgb(@ButtonMenuArrowHi@);
    width: 0; 
    height: 0; 
    border-left: @3px@ solid rgba(@ButtonGradHi@, 0);
    border-right: @3px@ solid rgba(@ButtonGradHi@, 0);
    border-top: @5px@ solid rgb(@ScrollArrow@);
}

QSplitter::handle:horizontal
{
    background-color: rgb(@SplitBarBackground@);
    width: @4px@;
}

QSplitter::handle:vertical
{
    background-color: rgb(@SplitBarBackground@);
    height: @4px@;
}

QSplitter#wideSplitter::handle:horizontal
{
    width: @6px@;
}
QSplitter#wideSplitter::handle:vertical
{
    height: @6px@;
}

QSplitter::handle:pressed
{
    background-color: rgb(@SplitBarHighlight2@);
}

QSplitterHandle:hover
{
}

QSplitter::handle:hover
{
    background-color: rgb(@SplitBarHighlight2@);
}

QStatusBar
{
    background: rgb(@BackColor@);
    color: rgb(@TextColor@); 
}

QStatusBar::item
{
    border: @0px@;
}

QTabBar
{
    background: rgb(@BackColor@);
}

QTabBar::tab
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@ButtonGradHi@),
                                stop: 1.0 rgb(@ButtonNonActiveGradLow@));
    color: @ButtonText@;

    padding-left: @7px@;
    padding-right: @7px@;
    height: @20px@;

    border: @1px@ solid rgb(@ButtonShadowMed@);
    border-radius: 0px;

    /*
    Do not draw the left border or else we will see a double border
    in between the tabs.
    */
    border-left: 0px;
}

QTabBar::tab:first,
QTabBar::tab:only-one
{
    /*
    Draw the left border only on the first tab.
    */
    border-left: @1px@ solid rgb(@ButtonShadowMed@);
}

QTabBar::tab:hover,
QTabBar[test_focus="true"]::tab:middle
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
        stop: 0.0 rgb(@ButtonGradHi:Brightness=1.05@),
        stop: 1.0 rgb(@ButtonNonActiveGradLow:Brightness=1.05@));
}

QTabBar::tab:selected
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@ButtonGradHi@), 
                                stop: 1.0 rgb(@BackColor@));

    /*
    Draw an 'invisible' bottom border which matches the background color.
    This is a trick to get Qt to draw the left and right borders all the
    way to the bottom edge.  If we instead did a 0px border bottom then Qt
    does not render a border in the bottom-left and bottom-right corners of
    the selected tab.
    */
    border-bottom: @1px@ solid rgb(@BackColor@);
}

QTableView
{
    alternate-background-color: rgb(@ListEntry1@);
    background: rgb(@ListEntry2@);
    selection-background-color: rgba(@ListEntrySelected@, 77);
    selection-color: rgb(@SelectedTextFG@);
    color: rgb(@ListText@);
}

QTableView::item
{
    border-right: @1px@ solid rgb(@ListBorder@);
    border-left: 0;
    border-top: 0;
    border-bottom: 0;
}

/* Setting the alternate colour of an item has no effect when the alternate-background-color is set
QTableView::item::alternate
{
    background: rgb(@ListEntry2@);
}
*/

QTableView::item:selected
{
    border-top: @1px@ solid rgb(@ListEntrySelected@);
    border-bottom: @1px@ solid rgb(@ListEntrySelected@);
    color: rgb(@TextColor@);
    background: rgba(@ListEntrySelected@, 77);
}

QTabWidget
{
    background: rgb(@BackColor@);
    border: solid 1px rgb(0, 255, 0);
}

QTabWidget::pane
{
    border: @1px@ solid rgb(@ButtonShadowMed@);
    border-radius: 0px;
    background: rgb(@BackColor@);

    /*
    Reposition pane so that the top border overlaps with the bottom border
    of the tab bar.  This is how we get the look of the selected tab having
    no bottom border.
    */
    top: -@1px@;
}

QTabWidget::tab-bar
{
    alignment: left;
}

QTextBrowser
{
    color: rgb(@TextColor@);
    selection-background-color: rgb(@SelectedTextBG@);
    selection-color: rgb(@SelectedTextFG@);
    border: none;
}

QTextEdit
{
    background: rgb(@TextboxBG@);
    color: rgb(@TextColor@);
    selection-background-color: rgb(@SelectedTextBG@);
    selection-color: rgb(@SelectedTextFG@);
}

QTextEdit#code_edit
{
    background: rgb(@ButtonGradHi@);
    font-size: @15px@;
    border: none;
}

QTextEdit#fixed_font_edit
{
    font-family: @FontFixed@;
}

QPlainTextEdit#fixed_font_edit
{
    font-family: @FontFixed@;
}

QTreeView
{
    alternate-background-color: rgb(@ListEntry1@);
    background: rgb(@ListEntry2@);
    selection-background-color: rgba(@ListEntrySelected@, 77);
    selection-color: rgb(@SelectedTextFG@);
    color: rgb(@ListText@);
    show-decoration-selected: 1;
}

QTreeView::indicator
{
    color: rgb(@CheckColor@);
}


QTreeView::item:selected
{
    color: rgb(@TextColor@);
    background: rgba(@ListEntrySelected@, 77);
}

QTreeView::item:hover
{
    background: rgb(@ListHoverHighlight@);
}

QTreeView::item:selected:hover
{
    color: rgb(@TextColor@);
    background: rgb(@ListEntrySelected:BlendColor=ListHoverHighlight,BlendBias=0.75@);
}

QTreeView::item:disabled
{
    color: rgb(@DisabledTextColor@);
}

QTreeView::branch {
    border-image: url(:/MISC/empty.svg) 0;
}

QTreeView::branch:hover {
    background: rgb(@ListHoverHighlight@);
}

QTreeView::branch:selected:hover
{
    color: rgb(@TextColor@);
    background: rgb(@ListEntrySelected:BlendColor=ListHoverHighlight,BlendBias=0.75@);
}

QTreeView::branch:has-siblings:!adjoins-item {
    border-image: url(:/MISC/tree_vline.svg) 0;
}

QTreeView::branch:has-siblings:adjoins-item {
    border-image: url(:/MISC/tree_branch_more.svg) 0;
}

QTreeView::branch:!has-siblings:adjoins-item {
    border-image: url(:/MISC/tree_branch_end.svg) 0;
}
QTreeView::branch:closed:has-children {
    image: url(:/BUTTONS/tree_plus.svg);
}

QTreeView::branch:open:has-children {
    image: url(:/BUTTONS/tree_minus.svg);
}


QToolTip {
    border: solid 1px rgb(@PopupHelpBG@);
    background: rgb(@PopupHelpBG@);
    color: rgb(@PopupHelpFG@);
}

/******************************************************************************
RADIAL MENU STYLES.
******************************************************************************/
QT_RadialMenu 
{
    color: rgb(@MenuText@);
    background: rgb(@MenuBG@);
    selection-background-color: rgb(@MenuSelectedBG@);
    qproperty-bgLight: rgb(@MenuHighlight@);
    qproperty-bgDark: rgb(@MenuShadow@);
}

/******************************************************************************
HELP BROWSER STYLES.
******************************************************************************/
QLineEdit[invalid="true"],
QSpinBox[invalid="true"]
{
    background: rgb(@TextboxInvalidBG@);
}

QTabBar[webbrowser="true"]::tab
{
    width: @100px@;
    border-radius:@1px@;
    margin: @0px@;
}

QTabBar[webbrowser="true"]::tab:last
{
    border-color: rgb(@BackColor@);
    border-radius: @0px@;
    background: none;
    margin: @0px@;
}

QTabBar[webbrowser="true"]::close-button
{
    subcontrol-position: right;
    image: url(:/BUTTONS/delete.svg);
    width: @8px@;
    height: @8px@;
    margin: @4px@;
}

#statusbar_line
{
    color: rgb(@BorderLight@);
}

#toolbar_line
{
    color: rgb(@BorderLight@);
}

/******************************************************************************
NETWORK EDITOR STYLES.
******************************************************************************/
NodeGraphFastFindWindow
{
    background-color: rgb(@BackColor@);
}

NodeGraphDispOptsWindow
{
    background-color: rgb(@BackColor@);
}

#node_popup_window
, #node_popup_window QLabel
{
    background-color: rgb(@NodePopupBG@)
}

#node_popup_window[needsRefresh="true"]
, #node_popup_window[needsRefresh="true"] QLabel
{
    background-color: rgb(@NodePopupNeedsRefreshBG@)
}

#task_popup_window
{
    background-color: rgb(@TaskPopupBG@);
}

#node_popup_window QTextBrowser, #task_popup_window QTextBrowser
{
    background-color: transparent;
}

#node_popup_window QToolButton:checked, #task_popup_window QToolButton:checked
{
    background-color: rgb(@SelectedTextBG@);
}

#node_popup_section
{
    border-top: 1px solid rgb(@ToolbarBevelLight@);
    background-color: transparent;
}

#node_popup_list_section
{
    background-color: transparent;
}

#node_popup_list
{
    background-color: transparent;
    border: none;
}

#node_popup_basic_section
{
    background-color: rgb(@NodePopupBasicBG@);
}

#task_popup_basic_section
{
    background-color: rgb(@TaskPopupBasicBG@);
}

#node_popup_comment
{
    background-color: transparent;
    color: rgb(@GraphCommentText@);
    selection-background-color: rgb(@SelectedTextBG@);
    selection-color: rgb(@SelectedTextFG@);
    border: none;
}

#node_popup_showcomment
{
    color: rgb(@GraphCommentText@);
}

#node_popup_basic_html {
    background-color: black;
}

#node_popup_badgeicon
{
    background-color: transparent;
    border: none;
}

/******************************************************************************
CHARACTER PICKER STYLES.
******************************************************************************/

#char_picker_tab::pane
{
    border: none;
}

#dropdown_button, #add_ctrl_button 
{
    background: rgba(50, 50, 50, 0.3);
    border: 2px solid rgba(180, 180, 180, 0.7);
    border-radius: 0;
}

#dropdown_button::hover
{
    background: rgba(100, 100, 100, 0.7);
    border-color: rgb(180, 180, 180);
}

#dropdown_button::menu-indicator
{
    subcontrol-position: right bottom;
    right: -2px;
    bottom: -3px;
}

#grid_snap
{
    background: transparent;
    gridline-color: rgb(100,100,100);
}

#grid_snap::item 
{
    border: none;
}

#plus_tab_button
{
    background: none;
    border: none;
    border-radius: @0px@;
    padding: @0px@;
}

#plus_tab_button::hover
{
    background: rgba(255, 255, 255, 45%);
}

#plus_tab_button::pressed
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
    stop: 0.0 rgb(@ButtonPressedGradHi:BlendColor=ButtonPressedGradLow,BlendBias=0.4@), 
    stop: 1.0 rgb(@ButtonPressedGradLow@));
    color: rgb(@ButtonPressedText@);
}

#plus_tab_button::menu-indicator, #control_button::menu-indicator
{
    background: transparent;
}

/******************************************************************************
POSE LIBRARY STYLES.
******************************************************************************/

#grid_view_footer
{
    background-color: rgb(@ListEntry2@);
    border: @1px@ solid rgb(@GroupBorder@);
}

TreeView::item
{
    border: none;
}

InfoWindow *
{
    background: transparent;
}

InfoWindow QLabel[tableLabel="true"]
{
    color: rgb(@DisabledTextColor@);
}

InfoWindow QLabel[title="true"]
{
    font-size: @25px@;
    font-weight: bold;
}

#horizontal_header 
{
    border: none;
}


/******************************************************************************
HOTKEY MANAGER STYLES.
******************************************************************************/

VirtualKeyCapWidget
{
    font-size: @12px@;
    padding: @3px@;
    background-color: rgb(@KeyCapDefaultFill@);
    color: rgb(@TextColor@);
    min-height: @35px@;
    min-width: @35px@;
    text-align: top left;
    border: @2px@ solid transparent;
    qproperty-conflictItemFormat: "<li>{0} in {1}</li>";
}

VirtualKeyCapWidget[smalltype=true]
{
    font-size: @9px@;
}

VirtualKeyCapWidget[available=true]
{
    background-color: rgb(@KeyCapDefaultFill@);
}

/* don't test that the property is false, rather that it isn't true */
VirtualKeyCapWidget[available=false]
{
    background-color: rgb(@KeyCapUnavailableFill@);
    color: rgb(@DisabledTextColor@);
}


/* assigned-self and assigned-peer are typically mutually exclusive,
   but are not mutually exclusive with assigned-ancestor or assigned-descendant
   since the key could be assigned above, below and in the current context */

VirtualKeyCapWidget[assignedSelf=true]
{
    background-color: rgb(@KeyCapAssignedFill@);
    border: @2px@ solid rgb(@KeyCapSelectionBorder@);
}

VirtualKeyCapWidget[assignedPeer=true]
{
    background-color: rgb(@KeyCapAssignedFill@);
    color: rgb(@HiliteTextColor@);
}

VirtualKeyCapWidget[assignedAncestor=true]
{
    background-image: url(:/dark_stripes.png);

    /*
    background-color: qlineargradient(spread:repeat,
        x1:0, y1:0, x2:0.1, y2:0.1,
        stop:0 rgba(255, 255, 255, 20),
        stop:0.5 rgba(255, 255, 255, 20),
        stop: 0.5001 rgba(255, 255, 255, 0),
        stop:1 rgba(255, 255, 255, 0)
    );
     */
}

VirtualKeyCapWidget[assignedDescendant=true]
{
    background-image: url(:/light_stripes.png);

    /*
    background-color: qlineargradient(spread:repeat,
        x1:0, y1:0, x2:0.1, y2:0.1,
        stop:0 rgba(0, 0, 0, 10),
        stop:0.5 rgba(0, 0, 0, 10),
        stop: 0.5001 rgba(0, 0, 0, 0),
        stop:1 rgba(0, 0, 0, 0)
    );
     */
}

VirtualKeyCapWidget#Alt
{
    background-color: rgb(@ModifierKeyOffFill@);
    border: @2px@ solid rgb(@AltKeyBorder@);
}
VirtualKeyCapWidget#Ctrl
{
    background-color: rgb(@ModifierKeyOffFill@);
    border: @2px@ solid rgb(@CtrlKeyBorder@);
}
VirtualKeyCapWidget#Shift
{
    background-color: rgb(@ModifierKeyOffFill@);
    border: @2px@ solid rgb(@ShiftKeyBorder@);
}
VirtualKeyCapWidget#Cmd
{
    background-color: rgb(@ModifierKeyOffFill@);
    border: @2px@ solid rgb(@CmdKeyBorder@);
}

VirtualKeyCapWidget:checked {
    color: rgb(@KeyCapSelectionText@);
}
VirtualKeyCapWidget#Alt:checked {
    background-color: rgb(@AltKeyFill@);
    border-color: rgb(@KeyCapSelectionBorder@);
}
VirtualKeyCapWidget#Ctrl:checked {
    background-color: rgb(@CtrlKeyFill@);
    border-color: rgb(@KeyCapSelectionBorder@);
}
VirtualKeyCapWidget#Shift:checked {
    background-color: rgb(@ShiftKeyFill@);
    border-color: rgb(@KeyCapSelectionBorder@);
}
VirtualKeyCapWidget#Cmd:checked {
    background-color: rgb(@CmdKeyFill@);
    border-color: rgb(@KeyCapSelectionBorder@);
}

VirtualKeyCapWidget#Alt:checked:hover {
    background-color: rgb(@AltKeyHilite@);
}
VirtualKeyCapWidget#Ctrl:checked:hover {
    background-color: rgb(@CtrlKeyHilite@);
}
VirtualKeyCapWidget#Shift:checked:hover {
    background-color: rgb(@ShiftKeyHilite@);
}
VirtualKeyCapWidget#Cmd:checked:hover {
    background-color: rgb(@CmdKeyHilite@);
}


/* Hover looks */
VirtualKeyCapWidget:hover {
    background-color: rgb(@KeyCapDefaultHover@);
}
VirtualKeyCapWidget[available=false]:hover {
    background-color: rgb(@KeyCapUnavailableHover@);
}
VirtualKeyCapWidget[assignedSelf=true]:hover  {
    background-color: rgb(@KeyCapAssignedHover@);
}
VirtualKeyCapWidget[assignedPeer=true]:hover {
    background-color: rgb(@KeyCapAssignedHover@);
}
VirtualKeyCapWidget#Alt:hover, VirtualKeyCapWidget#Ctrl:hover,
VirtualKeyCapWidget#Shift:hover, VirtualKeyCapWidget#Cmd:hover {
    background-color: rgb(@ModifierKeyOffHover@);
}


/* The view for the keylist */
QTreeView#hotkeymanager-commandkeylist
{
    min-height: @35px@;
}

QTreeView#hotkeymanager-commandkeylist:item
{
    border: None;
}

ContextTreeView
{
    min-height: @35px@;
}

ContextTreeView:item
{
    border: None;
}

CommandTreeView
{
    min-height: @35px@;
}

/* The virtual keyboard pane, including its frame */
VirtualKeyBoardFrame
{
    border: none;
    qproperty-layoutSpacing: @2px@;
    qproperty-layoutMargins: @10px@;
}

CommandTreeView:item
{
    border: None;
}

/* The whole widget for capturing a raw key including the drop down for hard
   to enter keys */
KeyCaptureWidget
{
}

/* The input box for capturing a raw key */
RawKeyCapture
{
}

QWidget#hotkeymanager-commandTitle
{
}

QWidget#hotkeymanager-commandHelpText
{
    border: none;
}

QWidget#hotkeymanager-commandConflictFrame
{
    border: 1px solid rgb(@BorderDark@);
}

QWidget#hotkeymanager-commandConflictText
{
}

QPushButton#delete
{
    padding: @3px@;
}

QLabel#list_warning
{
    border: none;
    image: url(:/STATUS/warning.svg);
}

QWidget[list_widget="true"]:hover
{
    background: rgb(@ListHoverHighlight@);
}

/******************************************************************************
PYTHON PANEL HELP EXAMPLES STYLES.
******************************************************************************/
ExampleHelpWidget[help_text="true"]
{
    border-bottom: @1px@ solid rgb(@TextColor@);
}

/******************************************************************************
hou.qt SPECIFIC STYLES.
******************************************************************************/
QFrame[houdiniSeparator="true"]
{
    background-color: rgba(@BackColor@, 88%);
    color: rgb(@Separator@);
}

QWidget[houdiniToolTip="true"]
{
    background: rgb(@PopupHelpBG@);
    color: rgb(@PopupHelpFG@);
}

QFrame[houdiniToolTipSeparator="true"]
{
    color: rgb(@PopupHelpFG@);
}

QLabel[houdiniToolTipTitle="true"]
{
    background: rgb(@PopupHelpBG@);
    font-weight: bold;
    padding: @4px@ @2px@ @2px@ @2px@;
}

QLabel[houdiniToolTipText="true"]
{
    background: rgb(@PopupHelpBG@);
    padding: @2px@;
}

QLabel[houdiniToolTipHotkeyText="true"]
{
    background: rgb(@PopupHelpBG@);
    font-style: italic;
    padding: @0px@ @2px@ @2px@ @10px@;
    text-align: top left;
}

QLabel[houdiniToolTipExtra="true"]
{
    background: rgb(@PopupExtraHelpBG@);
    color: rgb(@PopupExtraHelpFG@);
    padding: @0px@ @2px@ @0px@ @2px@;
}

QPushButton[menu="true"]
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgb(@ButtonMenuArrowHi@), 
                                stop: 1.0 rgb(@ButtonMenuArrowLow@));

    border: @1px@ solid rgb(@ButtonShadow@);
    border-radius: @2px@;
    height: @18px@;
    width: @18px@;
    padding: @0px@;
}

QPushButton[menu="true"]:hover 
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
        stop: 0.0 rgb(@ButtonMenuArrowHi:Brightness=1.05@), 
        stop: 1.0 rgb(@ButtonMenuArrowLow:Brightness=1.05@));
}

QPushButton[menu="true"]:pressed
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
        stop: 0.0 rgb(@ButtonMenuArrowHi:BlendColor=ButtonPressedGradHi,BlendBias=0.75@), 
        stop: 1.0 rgb(@ButtonMenuArrowLow:BlendColor=ButtonPressedGradLow,BlendBias=0.75@));
}


QPushButton[menu="true"]:disabled
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                stop: 0.0 rgba(@ButtonMenuArrowHi@, 40%),
                                stop: 1.0 rgba(@ButtonMenuArrowLow@, 40%));
}

QPushButton[menu="true"]::menu-indicator
{
    height: @18px@;
    width: @18px@;

    /* Slight adjustment because of anti-aliasing to make the 
       menu arrow look more centered. 

       Note that we do not want to scale the adjustment.
       It really needs to be exactly 1 pixel.
    */
    left: 1px;
    top: 1px;

    subcontrol-position: left top;
}

QToolBar QToolButton,
QToolButton[flat="true"]
{
    background: none;
    border: none;
    border-radius: @0px@;
    padding: @0px@;
    width: @19px@;
    height: @19px@;
}

QToolBar QToolButton:hover,
QToolButton[flat="true"]:hover
{
    background: rgba(255, 255, 255, 45%);
}

QToolBar QToolButton:pressed,
QToolBar QToolButton:checked,
QToolButton[flat="true"]:pressed
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
        stop: 0.0 rgb(@ButtonPressedGradHi:BlendColor=ButtonPressedGradLow,BlendBias=0.4@), 
        stop: 1.0 rgb(@ButtonPressedGradLow@));
    color: rgb(@ButtonPressedText@);
}

/******************************************************************************
TOPs Workitem MMB TaskInfoSection.
******************************************************************************/
#node_popup_section QToolButton[flat="true"]
{
    background: none;
    border: none;
    border-radius: @0px@;
    padding: @0px@;
    width: @8px@;
    height: @12px@;
}

#node_popup_section QToolButton[flat="true"]:hover
{
    color: rgba(255, 255, 255, 100%);
}

#node_popup_section QWidget#ScrollableAttributeListContents
{
    background: rgb(@TaskPopupBG@);
}

#node_popup_section QWidget#GraphAttributeListContents
{
    background: rgb(@NodePopupBG@)
}

#node_popup_section QScrollArea
{
    border: none;
}


/******************************************************************************
 QT_Gallery based things like snapshot gallery, asset gallery and working
 set gallery.
******************************************************************************/
QT_GalleryView
{
    background: rgb(@GalleryBackground@);
    padding-top: @6px@;
    padding-left: @6px@;
    padding-right: @6px@;
    padding-bottom: 0px;
}

QT_SnapshotGalleryView
{
    background: rgb(@SnapshotGalleryBackground@);
}

#QT_AssetWorkingSetGalleryView::item:selected
{
    border: @1px@ solid rgb(@ListEntrySelected@);
    border-radius: @1px@;
    color: rgb(@TextColor@);
    background: rgba(@ListEntrySelected@, 77);
}

#QT_AssetGalleryView::item:selected
{
    border: @1px@ solid rgb(@ListEntrySelected@);
    border-radius: @1px@;
    color: rgb(@TextColor@);
    background: rgba(@ListEntrySelected@, 77);
}

